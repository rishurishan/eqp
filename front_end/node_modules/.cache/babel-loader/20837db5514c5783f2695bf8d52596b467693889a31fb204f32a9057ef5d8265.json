{"ast":null,"code":"var _jsxFileName = \"/home/mohammed/Downloads/medical-report-frontend-main/front_end/src/pages/Report/ReportForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ReportForm.css\";\nimport { jsPDF } from \"jspdf\";\nimport autoTable from 'jspdf-autotable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReportForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    clinicName: \"\",\n    physicianName: \"\",\n    physicianContact: \"\",\n    patientFirstName: \"\",\n    patientLastName: \"\",\n    patientDob: \"\",\n    patientContact: \"\",\n    chiefComplaint: \"\",\n    consultationNote: \"\",\n    clinicLogo: null\n  });\n  const [errors, setErrors] = useState({});\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleFileChange = e => {\n    const {\n      name\n    } = e.target;\n    const file = e.target.files[0];\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: file\n    }));\n  };\n  const validateForm = () => {\n    let valid = true;\n    const errors = {};\n\n    // Clinic Name validation\n    if (!formData.clinicName.trim()) {\n      errors.clinicName = \"Clinic Name is required\";\n      valid = false;\n    }\n\n    // Physician Name validation\n    if (!formData.physicianName.trim()) {\n      errors.physicianName = \"Physician Name is required\";\n      valid = false;\n    }\n\n    // Physician Contact validation\n    if (!formData.physicianContact.trim()) {\n      errors.physicianContact = \"Physician Contact is required\";\n      valid = false;\n    }\n\n    // Patient First Name validation\n    if (!formData.patientFirstName.trim()) {\n      errors.patientFirstName = \"Patient First Name is required\";\n      valid = false;\n    }\n\n    // Patient Last Name validation\n    if (!formData.patientLastName.trim()) {\n      errors.patientLastName = \"Patient Last Name is required\";\n      valid = false;\n    }\n\n    // Patient DOB validation\n    if (!formData.patientDob) {\n      errors.patientDob = \"Patient Date of Birth is required\";\n      valid = false;\n    }\n\n    // Patient Contact validation\n    if (!formData.patientContact.trim()) {\n      errors.patientContact = \"Patient Contact is required\";\n      valid = false;\n    }\n\n    // Chief Complaint validation\n    if (!formData.chiefComplaint.trim()) {\n      errors.chiefComplaint = \"Chief Complaint is required\";\n      valid = false;\n    }\n\n    // Consultation Note validation\n    if (!formData.consultationNote.trim()) {\n      errors.consultationNote = \"Consultation Note is required\";\n      valid = false;\n    }\n    setErrors(errors);\n    return valid;\n  };\n\n  // **************pdf generation*********************************\n\n  const generatePDF = () => {\n    const doc = new jsPDF();\n    const formatDate = date => {\n      return date.toISOString().split('T')[0];\n    };\n    const timestamp = formatDate(new Date());\n    const filename = `CR_${formData.patientLastName}_${formData.patientFirstName}_${formData.patientDob}.pdf`;\n\n    // Page number footer callback\n    const footer = data => {\n      let str = 'Page ' + doc.internal.getNumberOfPages();\n      // Add a footer with the timestamp and IP (static example here)\n      doc.setFontSize(10);\n      doc.text(`This report is generated on ${timestamp}`, data.settings.margin.left, doc.internal.pageSize.height - 10);\n      doc.text(str, doc.internal.pageSize.width - data.settings.margin.right - 10, doc.internal.pageSize.height - 10);\n    };\n\n    // Before this, you should check if clinicLogo is not null and handle it as in your original code\n    if (formData.clinicLogo) {\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        const imgData = event.target.result;\n        doc.addImage(imgData, 'JPEG', 15, 40, 50, 50); // Adjust position (x, y) and size (width, height) as needed\n\n        // Add other content after the image has been added\n        addContentToPDF(doc);\n        doc.save(filename);\n      };\n      reader.onerror = function (error) {\n        console.log('Error: ', error);\n      };\n      reader.readAsDataURL(formData.clinicLogo);\n    } else {\n      // If no logo, just add content and save\n      addContentToPDF(doc);\n      doc.save(filename);\n    }\n\n    // Header\n    doc.setFontSize(18);\n    doc.text('Medical Report', 14, 22);\n\n    // Optionally add more formatting here\n\n    // You would then call autoTable as follows\n    autoTable(doc, {\n      html: '#your-table-id',\n      // Your table ID if you have the data in an HTML table\n      didDrawPage: data => {\n        if (formData.clinicLogo) {\n          // You might have to adjust these coordinates according to the dimensions of your logo\n          doc.addImage(formData.clinicLogo, 'PNG', data.settings.margin.left, 15, 30, 15);\n        }\n      },\n      margin: {\n        top: 30\n      },\n      startY: doc.internal.pageSize.height / 2,\n      // You might want to calculate this based on your page content\n      theme: 'plain',\n      // Choose a theme or customize it as needed\n      footStyles: {\n        fillColor: [255, 255, 255]\n      },\n      // Optional styling for the footer\n      willDrawCell: data => {\n        // This can be used to format cells as needed, e.g., for text formatting\n      },\n      didDrawPage: footer // Adding the footer to each page\n    });\n\n    // Saving the document with the dynamic name\n    doc.save(filename);\n  };\n  function addContentToPDF(doc) {\n    const tableColumn = [\"Field\", \"Value\"];\n    const tableRows = [];\n    Object.keys(formData).forEach(key => {\n      if (key !== \"clinicLogo\") {\n        // Avoid adding the logo file reference as a text\n        tableRows.push([key, formData[key] instanceof File ? \"File Uploaded\" : formData[key]]);\n      }\n    });\n\n    // Optionally adjust startY based on your image size if logo is present\n    doc.autoTable({\n      head: [tableColumn],\n      body: tableRows,\n      startY: 100 // Adjust this value as needed to place the table below your image\n    });\n  }\n\n  // **************pdf generation*********************************\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (validateForm()) {\n      generatePDF();\n    } else {\n      console.log(\"Form validation failed\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"report-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Clinic Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"clinicName\",\n        value: formData.clinicName,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }, this), errors.clinicName && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: errors.clinicName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Generate Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 3\n  }, this);\n};\n_s(ReportForm, \"Wo+G2APBmV1lC1mQAnlkhQLWVhM=\");\n_c = ReportForm;\nexport default ReportForm;\nvar _c;\n$RefreshReg$(_c, \"ReportForm\");","map":{"version":3,"names":["React","useState","jsPDF","autoTable","jsxDEV","_jsxDEV","ReportForm","_s","formData","setFormData","clinicName","physicianName","physicianContact","patientFirstName","patientLastName","patientDob","patientContact","chiefComplaint","consultationNote","clinicLogo","errors","setErrors","handleChange","e","name","value","target","prevState","handleFileChange","file","files","validateForm","valid","trim","generatePDF","doc","formatDate","date","toISOString","split","timestamp","Date","filename","footer","data","str","internal","getNumberOfPages","setFontSize","text","settings","margin","left","pageSize","height","width","right","reader","FileReader","onload","event","imgData","result","addImage","addContentToPDF","save","onerror","error","console","log","readAsDataURL","html","didDrawPage","top","startY","theme","footStyles","fillColor","willDrawCell","tableColumn","tableRows","Object","keys","forEach","key","push","File","head","body","handleSubmit","preventDefault","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/home/mohammed/Downloads/medical-report-frontend-main/front_end/src/pages/Report/ReportForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ReportForm.css\";\nimport { jsPDF } from \"jspdf\";\nimport autoTable from 'jspdf-autotable';\n\nconst ReportForm = () => {\n  const [formData, setFormData] = useState({\n    clinicName: \"\",\n    physicianName: \"\",\n    physicianContact: \"\",\n    patientFirstName: \"\",\n    patientLastName: \"\",\n    patientDob: \"\",\n    patientContact: \"\",\n    chiefComplaint: \"\",\n    consultationNote: \"\",\n    clinicLogo: null,\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleFileChange = (e) => {\n    const { name } = e.target;\n    const file = e.target.files[0];\n    setFormData((prevState) => ({\n      ...prevState,\n      [name]: file,\n    }));\n  };\n\n  const validateForm = () => {\n    let valid = true;\n    const errors = {};\n\n    // Clinic Name validation\n    if (!formData.clinicName.trim()) {\n      errors.clinicName = \"Clinic Name is required\";\n      valid = false;\n    }\n\n    // Physician Name validation\n    if (!formData.physicianName.trim()) {\n      errors.physicianName = \"Physician Name is required\";\n      valid = false;\n    }\n\n    // Physician Contact validation\n    if (!formData.physicianContact.trim()) {\n      errors.physicianContact = \"Physician Contact is required\";\n      valid = false;\n    }\n\n    // Patient First Name validation\n    if (!formData.patientFirstName.trim()) {\n      errors.patientFirstName = \"Patient First Name is required\";\n      valid = false;\n    }\n\n    // Patient Last Name validation\n    if (!formData.patientLastName.trim()) {\n      errors.patientLastName = \"Patient Last Name is required\";\n      valid = false;\n    }\n\n    // Patient DOB validation\n    if (!formData.patientDob) {\n      errors.patientDob = \"Patient Date of Birth is required\";\n      valid = false;\n    }\n\n    // Patient Contact validation\n    if (!formData.patientContact.trim()) {\n      errors.patientContact = \"Patient Contact is required\";\n      valid = false;\n    }\n\n    // Chief Complaint validation\n    if (!formData.chiefComplaint.trim()) {\n      errors.chiefComplaint = \"Chief Complaint is required\";\n      valid = false;\n    }\n\n    // Consultation Note validation\n    if (!formData.consultationNote.trim()) {\n      errors.consultationNote = \"Consultation Note is required\";\n      valid = false;\n    }\n\n    setErrors(errors);\n    return valid;\n  };\n\n  // **************pdf generation*********************************\n\n  const generatePDF = () => {\n    const doc = new jsPDF();\n  \n    const formatDate = (date) => {\n      return date.toISOString().split('T')[0];\n    };\n  \n    const timestamp = formatDate(new Date());\n    const filename = `CR_${formData.patientLastName}_${formData.patientFirstName}_${formData.patientDob}.pdf`;\n  \n    // Page number footer callback\n    const footer = (data) => {\n      let str = 'Page ' + doc.internal.getNumberOfPages();\n      // Add a footer with the timestamp and IP (static example here)\n      doc.setFontSize(10);\n      doc.text(`This report is generated on ${timestamp}`, data.settings.margin.left, doc.internal.pageSize.height - 10);\n      doc.text(str, doc.internal.pageSize.width - data.settings.margin.right - 10, doc.internal.pageSize.height - 10);\n    };\n  \n    // Before this, you should check if clinicLogo is not null and handle it as in your original code\n    if (formData.clinicLogo) {\n      const reader = new FileReader();\n  \n      reader.onload = function(event) {\n        const imgData = event.target.result;\n        doc.addImage(imgData, 'JPEG', 15, 40, 50, 50); // Adjust position (x, y) and size (width, height) as needed\n  \n        // Add other content after the image has been added\n        addContentToPDF(doc);\n        doc.save(filename);\n      };\n  \n      reader.onerror = function(error) {\n        console.log('Error: ', error);\n      };\n  \n      reader.readAsDataURL(formData.clinicLogo);\n    } else {\n      // If no logo, just add content and save\n      addContentToPDF(doc);\n      doc.save(filename);\n    }\n  \n    // Header\n    doc.setFontSize(18);\n    doc.text('Medical Report', 14, 22);\n    \n    // Optionally add more formatting here\n  \n    // You would then call autoTable as follows\n    autoTable(doc, {\n      html: '#your-table-id', // Your table ID if you have the data in an HTML table\n      didDrawPage: (data) => {\n        if (formData.clinicLogo) {\n          // You might have to adjust these coordinates according to the dimensions of your logo\n          doc.addImage(formData.clinicLogo, 'PNG', data.settings.margin.left, 15, 30, 15);\n        }\n      },\n      margin: { top: 30 },\n      startY: doc.internal.pageSize.height / 2, // You might want to calculate this based on your page content\n      theme: 'plain', // Choose a theme or customize it as needed\n      footStyles: { fillColor: [255, 255, 255] }, // Optional styling for the footer\n      willDrawCell: data => {\n        // This can be used to format cells as needed, e.g., for text formatting\n      },\n      didDrawPage: footer, // Adding the footer to each page\n    });\n  \n    // Saving the document with the dynamic name\n    doc.save(filename);\n  };\n  \n  function addContentToPDF(doc) {\n    const tableColumn = [\"Field\", \"Value\"];\n    const tableRows = [];\n  \n    Object.keys(formData).forEach(key => {\n      if (key !== \"clinicLogo\") { // Avoid adding the logo file reference as a text\n        tableRows.push([key, formData[key] instanceof File ? \"File Uploaded\" : formData[key]]);\n      }\n    });\n  \n    // Optionally adjust startY based on your image size if logo is present\n    doc.autoTable({\n      head: [tableColumn],\n      body: tableRows,\n      startY: 100, // Adjust this value as needed to place the table below your image\n    });\n  }\n  \n // **************pdf generation*********************************\n\n const handleSubmit = (e) => {\n  e.preventDefault();\n  if (validateForm()) {\n    generatePDF();\n  } else {\n    console.log(\"Form validation failed\");\n  }\n};\n\nreturn (\n  <form onSubmit={handleSubmit} className=\"report-form\">\n    <div className=\"form-group\">\n      <label>Clinic Name</label>\n      <input\n        type=\"text\"\n        name=\"clinicName\"\n        value={formData.clinicName}\n        onChange={handleChange}\n      />\n      {errors.clinicName && <div className=\"error\">{errors.clinicName}</div>}\n    </div>\n    {/* Add similar form groups for other fields with error handling */}\n    <button type=\"submit\">Generate Report</button>\n  </form>\n);\n};\n\nexport default ReportForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}